const { Pool } = require('pg');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configuraci√≥n de Neon (PostgreSQL)
const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'machinery_reports',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'your_password',
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : undefined,
});

// Configuraci√≥n de Supabase
const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

const bucket = process.env.SUPABASE_BUCKET || 'machinery-reports';

async function cleanTestData() {
  try {
    console.log('üßπ Iniciando limpieza de datos de pruebas...');
    
    // 1. Limpiar datos de Neon (PostgreSQL)
    console.log('üìä Limpiando datos de Neon...');
    
    // Obtener todos los report IDs antes de borrar
    const reportsResult = await pool.query('SELECT id FROM reports');
    const reportIds = reportsResult.rows.map(row => row.id);
    
    if (reportIds.length > 0) {
      console.log(`üìã Encontrados ${reportIds.length} reportes para eliminar`);
      
      // Obtener todos los component IDs para las fotos
      const componentsResult = await pool.query('SELECT id FROM components WHERE report_id = ANY($1)', [reportIds]);
      const componentIds = componentsResult.rows.map(row => row.id);
      
      if (componentIds.length > 0) {
        console.log(`üîß Encontrados ${componentIds.length} componentes para eliminar`);
        
        // Obtener nombres de archivos de fotos antes de borrar
        const photosResult = await pool.query('SELECT filename FROM photos WHERE component_id = ANY($1)', [componentIds]);
        const photoFilenames = photosResult.rows.map(row => row.filename);
        
        if (photoFilenames.length > 0) {
          console.log(`üì∏ Encontradas ${photoFilenames.length} fotos para eliminar de Supabase Storage`);
          
          // 2. Limpiar archivos de Supabase Storage
          console.log('‚òÅÔ∏è Limpiando archivos de Supabase Storage...');
          
          for (const filename of photoFilenames) {
            try {
              const { error } = await supabase.storage
                .from(bucket)
                .remove([filename]);
              
              if (error) {
                console.warn(`‚ö†Ô∏è Error eliminando archivo ${filename}:`, error.message);
              } else {
                console.log(`‚úÖ Eliminado archivo: ${filename}`);
              }
            } catch (error) {
              console.warn(`‚ö†Ô∏è Error eliminando archivo ${filename}:`, error.message);
            }
          }
        }
        
        // Borrar fotos de la base de datos
        await pool.query('DELETE FROM photos WHERE component_id = ANY($1)', [componentIds]);
        console.log('‚úÖ Fotos eliminadas de la base de datos');
      }
      
      // Borrar componentes
      await pool.query('DELETE FROM components WHERE report_id = ANY($1)', [reportIds]);
      console.log('‚úÖ Componentes eliminados');
      
      // Borrar partes sugeridas
      await pool.query('DELETE FROM suggested_parts WHERE report_id = ANY($1)', [reportIds]);
      console.log('‚úÖ Partes sugeridas eliminadas');
      
      // Borrar reportes
      await pool.query('DELETE FROM reports WHERE id = ANY($1)', [reportIds]);
      console.log('‚úÖ Reportes eliminados');
      
    } else {
      console.log('‚ÑπÔ∏è No se encontraron reportes para eliminar');
    }
    
    // 3. Verificar que se mantengan los datos de configuraci√≥n
    console.log('üîç Verificando datos de configuraci√≥n...');
    
    const adminUser = await pool.query('SELECT COUNT(*) FROM users WHERE username = $1', ['admin']);
    const machineTypes = await pool.query('SELECT COUNT(*) FROM machine_types');
    const componentTypes = await pool.query('SELECT COUNT(*) FROM component_types');
    const resources = await pool.query('SELECT COUNT(*) FROM resources');
    const parameters = await pool.query('SELECT COUNT(*) FROM parameters');
    
    console.log('üìä Estado de datos de configuraci√≥n:');
    console.log(`   üë§ Usuario admin: ${adminUser.rows[0].count}`);
    console.log(`   üöú Tipos de m√°quina: ${machineTypes.rows[0].count}`);
    console.log(`   üîß Tipos de componente: ${componentTypes.rows[0].count}`);
    console.log(`   üìö Recursos: ${resources.rows[0].count}`);
    console.log(`   ‚öôÔ∏è Par√°metros: ${parameters.rows[0].count}`);
    
    console.log('üéâ Limpieza de datos de pruebas completada exitosamente!');
    console.log('üí° Los datos de configuraci√≥n (usuarios, tipos, recursos, par√°metros) se mantuvieron intactos.');
    
  } catch (error) {
    console.error('‚ùå Error durante la limpieza:', error);
  } finally {
    await pool.end();
  }
}

// Funci√≥n para mostrar estad√≠sticas antes de limpiar
async function showStatistics() {
  try {
    console.log('üìä Estad√≠sticas actuales de la base de datos:');
    
    const reports = await pool.query('SELECT COUNT(*) FROM reports');
    const components = await pool.query('SELECT COUNT(*) FROM components');
    const photos = await pool.query('SELECT COUNT(*) FROM photos');
    const suggestedParts = await pool.query('SELECT COUNT(*) FROM suggested_parts');
    const users = await pool.query('SELECT COUNT(*) FROM users');
    
    console.log(`   üìã Reportes: ${reports.rows[0].count}`);
    console.log(`   üîß Componentes: ${components.rows[0].count}`);
    console.log(`   üì∏ Fotos: ${photos.rows[0].count}`);
    console.log(`   üî© Partes sugeridas: ${suggestedParts.rows[0].count}`);
    console.log(`   üë• Usuarios: ${users.rows[0].count}`);
    
  } catch (error) {
    console.error('‚ùå Error obteniendo estad√≠sticas:', error);
  }
}

// Funci√≥n principal
async function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--stats') || args.includes('-s')) {
    await showStatistics();
    await pool.end();
    return;
  }
  
  if (args.includes('--help') || args.includes('-h')) {
    console.log('üßπ Script de limpieza de datos de pruebas');
    console.log('');
    console.log('Uso:');
    console.log('  node clean-test-data.js          # Ejecutar limpieza completa');
    console.log('  node clean-test-data.js --stats  # Mostrar estad√≠sticas actuales');
    console.log('  node clean-test-data.js --help   # Mostrar esta ayuda');
    console.log('');
    console.log('Este script eliminar√°:');
    console.log('  ‚úÖ Todos los reportes de prueba');
    console.log('  ‚úÖ Todos los componentes de prueba');
    console.log('  ‚úÖ Todas las fotos de prueba (de Supabase Storage y BD)');
    console.log('  ‚úÖ Todas las partes sugeridas de prueba');
    console.log('');
    console.log('Mantendr√°:');
    console.log('  üîí Usuarios (incluyendo admin)');
    console.log('  üöú Tipos de m√°quina');
    console.log('  üîß Tipos de componente');
    console.log('  üìö Recursos');
    console.log('  ‚öôÔ∏è Par√°metros');
    return;
  }
  
  // Confirmaci√≥n antes de ejecutar
  console.log('‚ö†Ô∏è ADVERTENCIA: Este script eliminar√° TODOS los datos de pruebas.');
  console.log('üìã Esto incluye reportes, componentes, fotos y partes sugeridas.');
  console.log('üîí Los datos de configuraci√≥n (usuarios, tipos, recursos) se mantendr√°n.');
  console.log('');
  
  // En producci√≥n, ejecutar directamente
  if (process.env.NODE_ENV === 'production') {
    console.log('üöÄ Ejecutando en modo producci√≥n...');
    await cleanTestData();
    return;
  }
  
  // En desarrollo, mostrar estad√≠sticas y preguntar
  await showStatistics();
  console.log('');
  console.log('¬øDeseas continuar con la limpieza? (y/N)');
  
  // Para automatizaci√≥n, usar --force
  if (args.includes('--force') || args.includes('-f')) {
    console.log('üöÄ Ejecutando con --force...');
    await cleanTestData();
    return;
  }
  
  // En modo interactivo, esperar confirmaci√≥n
  process.stdin.once('data', async (data) => {
    const input = data.toString().trim().toLowerCase();
    if (input === 'y' || input === 'yes') {
      await cleanTestData();
    } else {
      console.log('‚ùå Operaci√≥n cancelada');
    }
    process.exit(0);
  });
}

main().catch(console.error); 